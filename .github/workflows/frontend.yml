name: Frontend CI

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  lint:
    name: Lint Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

  build:
    name: Build Docker Image
    needs: [lint, test]
    env:
      REPO_URL: 576165291816.dkr.ecr.eu-central-1.amazonaws.com
      IMAGE_NAME: frontend
      IMAGE_TAG: latest
    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      
      - name: Debug AWS Identity
        run: aws sts get-caller-identity
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${REPO_URL}

      - name: Build Image
        working-directory: frontend
        env:
          IMAGE_TAG: latest
          REPO_NAME: frontend
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag ${REPO_URL}/${IMAGE_NAME}:${IMAGE_TAG} .
        
      - name: Deploy Image
        env:
          IMAGE_TAG: latest
          REPO_NAME: frontend
        run: |
            docker push ${REPO_URL}/${IMAGE_NAME}:${IMAGE_TAG}
  deploy:
      name: Deploy to EKS
      needs: build
      runs-on: ubuntu-latest
      env:
        REPO_URL: 576165291816.dkr.ecr.eu-central-1.amazonaws.com
        IMAGE_NAME: frontend
        IMAGE_TAG: latest
        CLUSTER_NAME: movie-picture-eks-cluster
      steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      
      - name: Debug AWS Identity
        run: aws sts get-caller-identity
      
      - name: Configure Kubeconfig
        run: aws eks update-kubeconfig --name ${CLUSTER_NAME} --region eu-central-1

      - name: Deploy Docker Image to Amazon EKS
        working-directory: frontend/k8s
        env:
          IMAGE_TAG: latest
          REPO_NAME: frontend
          REPO_URL: 576165291816.dkr.ecr.eu-central-1.amazonaws.com
          IMAGE_NAME: frontend
        run: |
          kustomize edit set image frontend=${REPO_URL}/${IMAGE_NAME}:${IMAGE_TAG}
          kustomize build | kubectl apply -f -
